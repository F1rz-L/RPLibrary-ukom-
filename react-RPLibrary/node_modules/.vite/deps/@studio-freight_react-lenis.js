import {
  clsx_default
} from "./chunk-VEB3A3D5.js";
import {
  require_react
} from "./chunk-5YCX2AZH.js";
import {
  __commonJS,
  __publicField,
  __toESM
} from "./chunk-SNAQBZPT.js";

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React = require_react();
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function is(x2, y3) {
          return x2 === y3 && (x2 !== 0 || 1 / x2 === 1 / y3) || x2 !== x2 && y3 !== y3;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useState = React.useState, useEffect = React.useEffect, useLayoutEffect = React.useLayoutEffect, useDebugValue2 = React.useDebugValue;
        var didWarnOld18Alpha = false;
        var didWarnUncachedGetSnapshot = false;
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          {
            if (!didWarnOld18Alpha) {
              if (React.startTransition !== void 0) {
                didWarnOld18Alpha = true;
                error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
              }
            }
          }
          var value = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedValue = getSnapshot();
              if (!objectIs(value, cachedValue)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var _useState = useState({
            inst: {
              value,
              getSnapshot
            }
          }), inst = _useState[0].inst, forceUpdate = _useState[1];
          useLayoutEffect(function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
          }, [subscribe, value, getSnapshot]);
          useEffect(function() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            };
            return subscribe(handleStoreChange);
          }, [subscribe]);
          useDebugValue2(value);
          return value;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
          return getSnapshot();
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var isServerEnvironment = !canUseDOM;
        var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
        var useSyncExternalStore$2 = React.useSyncExternalStore !== void 0 ? React.useSyncExternalStore : shim;
        exports.useSyncExternalStore = useSyncExternalStore$2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
var require_with_selector_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React = require_react();
        var shim = require_shim();
        function is(x2, y3) {
          return x2 === y3 && (x2 !== 0 || 1 / x2 === 1 / y3) || x2 !== x2 && y3 !== y3;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useSyncExternalStore = shim.useSyncExternalStore;
        var useRef = React.useRef, useEffect = React.useEffect, useMemo = React.useMemo, useDebugValue2 = React.useDebugValue;
        function useSyncExternalStoreWithSelector2(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
          var instRef = useRef(null);
          var inst;
          if (instRef.current === null) {
            inst = {
              hasValue: false,
              value: null
            };
            instRef.current = inst;
          } else {
            inst = instRef.current;
          }
          var _useMemo = useMemo(function() {
            var hasMemo = false;
            var memoizedSnapshot;
            var memoizedSelection;
            var memoizedSelector = function(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                var _nextSelection = selector(nextSnapshot);
                if (isEqual !== void 0) {
                  if (inst.hasValue) {
                    var currentSelection = inst.value;
                    if (isEqual(currentSelection, _nextSelection)) {
                      memoizedSelection = currentSelection;
                      return currentSelection;
                    }
                  }
                }
                memoizedSelection = _nextSelection;
                return _nextSelection;
              }
              var prevSnapshot = memoizedSnapshot;
              var prevSelection = memoizedSelection;
              if (objectIs(prevSnapshot, nextSnapshot)) {
                return prevSelection;
              }
              var nextSelection = selector(nextSnapshot);
              if (isEqual !== void 0 && isEqual(prevSelection, nextSelection)) {
                return prevSelection;
              }
              memoizedSnapshot = nextSnapshot;
              memoizedSelection = nextSelection;
              return nextSelection;
            };
            var maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
            var getSnapshotWithSelector = function() {
              return memoizedSelector(getSnapshot());
            };
            var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : function() {
              return memoizedSelector(maybeGetServerSnapshot());
            };
            return [getSnapshotWithSelector, getServerSnapshotWithSelector];
          }, [getSnapshot, getServerSnapshot, selector, isEqual]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
          var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);
          useEffect(function() {
            inst.hasValue = true;
            inst.value = value;
          }, [value]);
          useDebugValue2(value);
          return value;
        }
        exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/with-selector.js
var require_with_selector = __commonJS({
  "node_modules/use-sync-external-store/shim/with-selector.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_with_selector_development();
    }
  }
});

// node_modules/@studio-freight/hamo/dist/hamo.modern.mjs
var import_react2 = __toESM(require_react(), 1);

// node_modules/@studio-freight/tempus/dist/tempus.modern.mjs
var a = "undefined" != typeof window && new class {
  constructor() {
    this.raf = (a3) => {
      requestAnimationFrame(this.raf);
      const t3 = a3 - this.now;
      this.now = a3;
      for (let s2 = 0; s2 < this.callbacks.length; s2++) this.callbacks[s2].callback(a3, t3);
    }, this.callbacks = [], this.now = performance.now(), requestAnimationFrame(this.raf);
  }
  add(a3, t3 = 0) {
    return this.callbacks.push({ callback: a3, priority: t3 }), this.callbacks.sort((a4, t4) => a4.priority - t4.priority), () => this.remove(a3);
  }
  remove(a3) {
    this.callbacks = this.callbacks.filter(({ callback: t3 }) => a3 !== t3);
  }
}();

// node_modules/just-debounce-it/index.mjs
var functionDebounce = debounce;
function debounce(fn, wait, callFirst) {
  var timeout = null;
  var debouncedFn = null;
  var clear = function() {
    if (timeout) {
      clearTimeout(timeout);
      debouncedFn = null;
      timeout = null;
    }
  };
  var flush = function() {
    var call = debouncedFn;
    clear();
    if (call) {
      call();
    }
  };
  var debounceWrapper = function() {
    if (!wait) {
      return fn.apply(this, arguments);
    }
    var context = this;
    var args = arguments;
    var callNow = callFirst && !timeout;
    clear();
    debouncedFn = function() {
      fn.apply(context, args);
    };
    timeout = setTimeout(function() {
      timeout = null;
      if (!callNow) {
        var call = debouncedFn;
        debouncedFn = null;
        return call();
      }
    }, wait);
    if (callNow) {
      return debouncedFn();
    }
  };
  debounceWrapper.cancel = clear;
  debounceWrapper.flush = flush;
  return debounceWrapper;
}

// node_modules/zustand/esm/vanilla.mjs
var createStoreImpl = (createState) => {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (!Object.is(nextState, state)) {
      const previousState = state;
      state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const getInitialState = () => initialState;
  const subscribe = (listener) => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => {
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
      console.warn(
        "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
      );
    }
    listeners.clear();
  };
  const api = { setState, getState, getInitialState, subscribe, destroy };
  const initialState = state = createState(setState, getState, api);
  return api;
};
var createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;

// node_modules/zustand/esm/index.mjs
var import_react = __toESM(require_react(), 1);
var import_with_selector = __toESM(require_with_selector(), 1);
var { useDebugValue } = import_react.default;
var { useSyncExternalStoreWithSelector } = import_with_selector.default;
var didWarnAboutEqualityFn = false;
var identity = (arg) => arg;
function useStore(api, selector = identity, equalityFn) {
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && equalityFn && !didWarnAboutEqualityFn) {
    console.warn(
      "[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"
    );
    didWarnAboutEqualityFn = true;
  }
  const slice = useSyncExternalStoreWithSelector(
    api.subscribe,
    api.getState,
    api.getServerState || api.getInitialState,
    selector,
    equalityFn
  );
  useDebugValue(slice);
  return slice;
}
var createImpl = (createState) => {
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && typeof createState !== "function") {
    console.warn(
      "[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."
    );
  }
  const api = typeof createState === "function" ? createStore(createState) : createState;
  const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn);
  Object.assign(useBoundStore, api);
  return useBoundStore;
};
var create = (createState) => createState ? createImpl(createState) : createImpl;

// node_modules/nanoevents/index.js
var createNanoEvents = () => ({
  emit(event, ...args) {
    for (let i2 = 0, callbacks = this.events[event] || [], length = callbacks.length; i2 < length; i2++) {
      callbacks[i2](...args);
    }
  },
  events: {},
  on(event, cb) {
    var _a;
    ;
    ((_a = this.events)[event] || (_a[event] = [])).push(cb);
    return () => {
      var _a2;
      this.events[event] = (_a2 = this.events[event]) == null ? void 0 : _a2.filter((i2) => cb !== i2);
    };
  }
});

// node_modules/@studio-freight/hamo/dist/hamo.modern.mjs
function m(e3, n3 = 0) {
  (0, import_react2.useEffect)(() => {
    if (e3) return a.add(e3, n3), () => a.remove(e3);
  }, [e3, n3]);
}
function b() {
  return b = Object.assign ? Object.assign.bind() : function(e3) {
    for (var t3 = 1; t3 < arguments.length; t3++) {
      var n3 = arguments[t3];
      for (var r2 in n3) Object.prototype.hasOwnProperty.call(n3, r2) && (e3[r2] = n3[r2]);
    }
    return e3;
  }, b.apply(this, arguments);
}
function g({ lazy: r2 = false, debounce: c2 = 500, box: s2 = "border-box", callback: u2 = () => {
} } = {}, a3 = []) {
  const d2 = (0, import_react2.useRef)({}), [f2, l2] = (0, import_react2.useState)({}), [m3, h] = (0, import_react2.useState)();
  (0, import_react2.useEffect)(() => {
    if (!m3) return;
    const e3 = functionDebounce(([e4]) => {
      d2.current = e4, u2(e4), r2 || l2(e4);
    }, c2, true), t3 = new ResizeObserver(e3);
    return t3.observe(m3, { box: s2 }), () => {
      t3.disconnect(), e3.cancel();
    };
  }, [m3, r2, c2, s2, ...a3]);
  const v = (0, import_react2.useCallback)(() => d2.current, []);
  return [h, r2 ? v : f2];
}
function y(e3) {
  "sticky" === getComputedStyle(e3).position && (e3.style.setProperty("position", "static"), e3.dataset.sticky = "true"), e3.offsetParent && y(e3.offsetParent);
}
function E(e3) {
  var t3;
  "true" === (null == e3 || null == (t3 = e3.dataset) ? void 0 : t3.sticky) && (e3.style.removeProperty("position"), e3.dataset.sticky = "true", delete e3.dataset.sticky), e3.parentNode && E(e3.parentNode);
}
function z(e3, t3 = 0) {
  const n3 = t3 + e3.offsetTop;
  return e3.offsetParent ? z(e3.offsetParent, n3) : n3;
}
function P(e3, t3 = 0) {
  const n3 = t3 + e3.offsetLeft;
  return e3.offsetParent ? P(e3.offsetParent, n3) : n3;
}
function L(e3, t3 = 0) {
  const n3 = t3 + e3.scrollTop;
  return e3.offsetParent ? L(e3.offsetParent, n3) : n3 + window.scrollY;
}
function k(e3, t3 = 0) {
  const n3 = t3 + e3.scrollLeft;
  return e3.offsetParent ? k(e3.offsetParent, n3) : n3 + window.scrollX;
}
var S = create((e3) => ({ elements: [], addElement: (t3) => {
  e3((e4) => ({ elements: [...e4.elements, t3] }));
}, removeElement: (t3) => {
  e3((e4) => ({ elements: e4.elements.filter((e5) => e5 !== t3) }));
} }));
var x = createNanoEvents();
function O({ ignoreTransform: r2 = false, ignoreSticky: c2 = true, lazy: s2 = false, debounce: u2 = 500, callback: a3 = () => {
} } = {}) {
  const [d2, f2] = (0, import_react2.useState)(), [l2, m3] = (0, import_react2.useState)({}), h = (0, import_react2.useRef)({}), v = (0, import_react2.useCallback)((e3) => {
    const t3 = e3.borderBoxSize[0].blockSize;
    h.current.width = e3.borderBoxSize[0].inlineSize, h.current.height = t3, a3(h.current), s2 || m3(b({}, h.current));
  }, [s2]), [p] = g({ lazy: true, debounce: u2, callback: v }, [u2, v]), w = S(({ elements: e3 }) => e3), O2 = (0, import_react2.useCallback)(() => {
    if (!d2) return;
    let e3, t3;
    if (c2 && y(d2), r2) e3 = z(d2), t3 = P(d2);
    else {
      const n3 = d2.getBoundingClientRect();
      e3 = n3.top + L(d2), t3 = n3.left + k(d2);
    }
    c2 && E(d2), h.current.top = e3, h.current.left = t3, a3(h.current), s2 || m3(b({}, h.current));
  }, [r2, c2, s2, d2]);
  (0, import_react2.useEffect)(() => {
    const e3 = functionDebounce(O2, u2, true), t3 = new ResizeObserver(e3);
    return t3.observe(document.body), w.forEach((e4) => {
      t3.observe(e4);
    }), () => {
      t3.disconnect(), e3.cancel();
    };
  }, [w, u2, O2]);
  const M = (0, import_react2.useCallback)(() => h.current, []);
  return (0, import_react2.useEffect)(() => x.on("resize", function() {
    if (!d2) return;
    const e3 = d2.getBoundingClientRect();
    h.current.width = e3.width, h.current.height = e3.height, O2();
  }), [d2, O2]), [(e3) => {
    f2(e3), p(e3);
  }, s2 ? M : l2];
}
O.observe = function(e3) {
  S.getState().addElement(e3);
}, O.unobserve = function(e3) {
  S.getState().removeElement(e3);
}, O.resize = function() {
  x.emit("resize");
};

// node_modules/@studio-freight/lenis/dist/lenis.mjs
function t2(t3, e3, i2) {
  return Math.max(t3, Math.min(e3, i2));
}
var Animate = class {
  advance(e3) {
    var _a;
    if (!this.isRunning) return;
    let i2 = false;
    if (this.lerp) this.value = (s2 = this.value, o3 = this.to, n3 = 60 * this.lerp, r2 = e3, function(t3, e4, i3) {
      return (1 - i3) * t3 + i3 * e4;
    }(s2, o3, 1 - Math.exp(-n3 * r2))), Math.round(this.value) === this.to && (this.value = this.to, i2 = true);
    else {
      this.currentTime += e3;
      const s3 = t2(0, this.currentTime / this.duration, 1);
      i2 = s3 >= 1;
      const o4 = i2 ? 1 : this.easing(s3);
      this.value = this.from + (this.to - this.from) * o4;
    }
    var s2, o3, n3, r2;
    (_a = this.onUpdate) == null ? void 0 : _a.call(this, this.value, i2), i2 && this.stop();
  }
  stop() {
    this.isRunning = false;
  }
  fromTo(t3, e3, { lerp: i2 = 0.1, duration: s2 = 1, easing: o3 = (t4) => t4, onStart: n3, onUpdate: r2 }) {
    this.from = this.value = t3, this.to = e3, this.lerp = i2, this.duration = s2, this.easing = o3, this.currentTime = 0, this.isRunning = true, n3 == null ? void 0 : n3(), this.onUpdate = r2;
  }
};
var Dimensions = class {
  constructor({ wrapper: t3, content: e3, autoResize: i2 = true, debounce: s2 = 250 } = {}) {
    __publicField(this, "resize", () => {
      this.onWrapperResize(), this.onContentResize();
    });
    __publicField(this, "onWrapperResize", () => {
      this.wrapper === window ? (this.width = window.innerWidth, this.height = window.innerHeight) : (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight);
    });
    __publicField(this, "onContentResize", () => {
      this.wrapper === window ? (this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth) : (this.scrollHeight = this.wrapper.scrollHeight, this.scrollWidth = this.wrapper.scrollWidth);
    });
    this.wrapper = t3, this.content = e3, i2 && (this.debouncedResize = /* @__PURE__ */ function(t4, e4) {
      let i3;
      return function() {
        let s3 = arguments, o3 = this;
        clearTimeout(i3), i3 = setTimeout(function() {
          t4.apply(o3, s3);
        }, e4);
      };
    }(this.resize, s2), this.wrapper === window ? window.addEventListener("resize", this.debouncedResize, false) : (this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(this.debouncedResize), this.contentResizeObserver.observe(this.content)), this.resize();
  }
  destroy() {
    var _a, _b;
    (_a = this.wrapperResizeObserver) == null ? void 0 : _a.disconnect(), (_b = this.contentResizeObserver) == null ? void 0 : _b.disconnect(), window.removeEventListener("resize", this.debouncedResize, false);
  }
  get limit() {
    return { x: this.scrollWidth - this.width, y: this.scrollHeight - this.height };
  }
};
var Emitter = class {
  constructor() {
    this.events = {};
  }
  emit(t3, ...e3) {
    let i2 = this.events[t3] || [];
    for (let t4 = 0, s2 = i2.length; t4 < s2; t4++) i2[t4](...e3);
  }
  on(t3, e3) {
    var _a;
    return ((_a = this.events[t3]) == null ? void 0 : _a.push(e3)) || (this.events[t3] = [e3]), () => {
      var _a2;
      this.events[t3] = (_a2 = this.events[t3]) == null ? void 0 : _a2.filter((t4) => e3 !== t4);
    };
  }
  off(t3, e3) {
    var _a;
    this.events[t3] = (_a = this.events[t3]) == null ? void 0 : _a.filter((t4) => e3 !== t4);
  }
  destroy() {
    this.events = {};
  }
};
var e2 = 100 / 6;
var VirtualScroll = class {
  constructor(t3, { wheelMultiplier: e3 = 1, touchMultiplier: i2 = 1 }) {
    __publicField(this, "onTouchStart", (t3) => {
      const { clientX: e3, clientY: i2 } = t3.targetTouches ? t3.targetTouches[0] : t3;
      this.touchStart.x = e3, this.touchStart.y = i2, this.lastDelta = { x: 0, y: 0 }, this.emitter.emit("scroll", { deltaX: 0, deltaY: 0, event: t3 });
    });
    __publicField(this, "onTouchMove", (t3) => {
      const { clientX: e3, clientY: i2 } = t3.targetTouches ? t3.targetTouches[0] : t3, s2 = -(e3 - this.touchStart.x) * this.touchMultiplier, o3 = -(i2 - this.touchStart.y) * this.touchMultiplier;
      this.touchStart.x = e3, this.touchStart.y = i2, this.lastDelta = { x: s2, y: o3 }, this.emitter.emit("scroll", { deltaX: s2, deltaY: o3, event: t3 });
    });
    __publicField(this, "onTouchEnd", (t3) => {
      this.emitter.emit("scroll", { deltaX: this.lastDelta.x, deltaY: this.lastDelta.y, event: t3 });
    });
    __publicField(this, "onWheel", (t3) => {
      let { deltaX: i2, deltaY: s2, deltaMode: o3 } = t3;
      i2 *= 1 === o3 ? e2 : 2 === o3 ? this.windowWidth : 1, s2 *= 1 === o3 ? e2 : 2 === o3 ? this.windowHeight : 1, i2 *= this.wheelMultiplier, s2 *= this.wheelMultiplier, this.emitter.emit("scroll", { deltaX: i2, deltaY: s2, event: t3 });
    });
    __publicField(this, "onWindowResize", () => {
      this.windowWidth = window.innerWidth, this.windowHeight = window.innerHeight;
    });
    this.element = t3, this.wheelMultiplier = e3, this.touchMultiplier = i2, this.touchStart = { x: null, y: null }, this.emitter = new Emitter(), window.addEventListener("resize", this.onWindowResize, false), this.onWindowResize(), this.element.addEventListener("wheel", this.onWheel, { passive: false }), this.element.addEventListener("touchstart", this.onTouchStart, { passive: false }), this.element.addEventListener("touchmove", this.onTouchMove, { passive: false }), this.element.addEventListener("touchend", this.onTouchEnd, { passive: false });
  }
  on(t3, e3) {
    return this.emitter.on(t3, e3);
  }
  destroy() {
    this.emitter.destroy(), window.removeEventListener("resize", this.onWindowResize, false), this.element.removeEventListener("wheel", this.onWheel, { passive: false }), this.element.removeEventListener("touchstart", this.onTouchStart, { passive: false }), this.element.removeEventListener("touchmove", this.onTouchMove, { passive: false }), this.element.removeEventListener("touchend", this.onTouchEnd, { passive: false });
  }
};
var Lenis = class {
  constructor({ wrapper: t3 = window, content: e3 = document.documentElement, wheelEventsTarget: i2 = t3, eventsTarget: s2 = i2, smoothWheel: o3 = true, syncTouch: n3 = false, syncTouchLerp: r2 = 0.075, touchInertiaMultiplier: l2 = 35, duration: h, easing: a3 = (t4) => Math.min(1, 1.001 - Math.pow(2, -10 * t4)), lerp: c2 = !h && 0.1, infinite: d2 = false, orientation: p = "vertical", gestureOrientation: u2 = "vertical", touchMultiplier: m3 = 1, wheelMultiplier: v = 1, autoResize: g2 = true, __experimental__naiveDimensions: S2 = false } = {}) {
    this.__isSmooth = false, this.__isScrolling = false, this.__isStopped = false, this.__isLocked = false, this.onVirtualScroll = ({ deltaX: t4, deltaY: e4, event: i3 }) => {
      if (i3.ctrlKey) return;
      const s3 = i3.type.includes("touch"), o4 = i3.type.includes("wheel");
      if (this.options.syncTouch && s3 && "touchstart" === i3.type && !this.isStopped && !this.isLocked) return void this.reset();
      const n4 = 0 === t4 && 0 === e4, r3 = "vertical" === this.options.gestureOrientation && 0 === e4 || "horizontal" === this.options.gestureOrientation && 0 === t4;
      if (n4 || r3) return;
      let l3 = i3.composedPath();
      if (l3 = l3.slice(0, l3.indexOf(this.rootElement)), l3.find((t5) => {
        var e5, i4, n5, r4, l4;
        return (null === (e5 = t5.hasAttribute) || void 0 === e5 ? void 0 : e5.call(t5, "data-lenis-prevent")) || s3 && (null === (i4 = t5.hasAttribute) || void 0 === i4 ? void 0 : i4.call(t5, "data-lenis-prevent-touch")) || o4 && (null === (n5 = t5.hasAttribute) || void 0 === n5 ? void 0 : n5.call(t5, "data-lenis-prevent-wheel")) || (null === (r4 = t5.classList) || void 0 === r4 ? void 0 : r4.contains("lenis")) && !(null === (l4 = t5.classList) || void 0 === l4 ? void 0 : l4.contains("lenis-stopped"));
      })) return;
      if (this.isStopped || this.isLocked) return void i3.preventDefault();
      if (this.isSmooth = this.options.syncTouch && s3 || this.options.smoothWheel && o4, !this.isSmooth) return this.isScrolling = false, void this.animate.stop();
      i3.preventDefault();
      let h2 = e4;
      "both" === this.options.gestureOrientation ? h2 = Math.abs(e4) > Math.abs(t4) ? e4 : t4 : "horizontal" === this.options.gestureOrientation && (h2 = t4);
      const a4 = s3 && this.options.syncTouch, c3 = s3 && "touchend" === i3.type && Math.abs(h2) > 5;
      c3 && (h2 = this.velocity * this.options.touchInertiaMultiplier), this.scrollTo(this.targetScroll + h2, Object.assign({ programmatic: false }, a4 ? { lerp: c3 ? this.options.syncTouchLerp : 1 } : { lerp: this.options.lerp, duration: this.options.duration, easing: this.options.easing }));
    }, this.onNativeScroll = () => {
      if (!this.__preventNextScrollEvent && !this.isScrolling) {
        const t4 = this.animatedScroll;
        this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.direction = Math.sign(this.animatedScroll - t4), this.emit();
      }
    }, window.lenisVersion = "1.0.42", t3 !== document.documentElement && t3 !== document.body || (t3 = window), this.options = { wrapper: t3, content: e3, wheelEventsTarget: i2, eventsTarget: s2, smoothWheel: o3, syncTouch: n3, syncTouchLerp: r2, touchInertiaMultiplier: l2, duration: h, easing: a3, lerp: c2, infinite: d2, gestureOrientation: u2, orientation: p, touchMultiplier: m3, wheelMultiplier: v, autoResize: g2, __experimental__naiveDimensions: S2 }, this.animate = new Animate(), this.emitter = new Emitter(), this.dimensions = new Dimensions({ wrapper: t3, content: e3, autoResize: g2 }), this.toggleClassName("lenis", true), this.velocity = 0, this.isLocked = false, this.isStopped = false, this.isSmooth = n3 || o3, this.isScrolling = false, this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener("scroll", this.onNativeScroll, false), this.virtualScroll = new VirtualScroll(s2, { touchMultiplier: m3, wheelMultiplier: v }), this.virtualScroll.on("scroll", this.onVirtualScroll);
  }
  destroy() {
    this.emitter.destroy(), this.options.wrapper.removeEventListener("scroll", this.onNativeScroll, false), this.virtualScroll.destroy(), this.dimensions.destroy(), this.toggleClassName("lenis", false), this.toggleClassName("lenis-smooth", false), this.toggleClassName("lenis-scrolling", false), this.toggleClassName("lenis-stopped", false), this.toggleClassName("lenis-locked", false);
  }
  on(t3, e3) {
    return this.emitter.on(t3, e3);
  }
  off(t3, e3) {
    return this.emitter.off(t3, e3);
  }
  setScroll(t3) {
    this.isHorizontal ? this.rootElement.scrollLeft = t3 : this.rootElement.scrollTop = t3;
  }
  resize() {
    this.dimensions.resize();
  }
  emit() {
    this.emitter.emit("scroll", this);
  }
  reset() {
    this.isLocked = false, this.isScrolling = false, this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.animate.stop();
  }
  start() {
    this.isStopped && (this.isStopped = false, this.reset());
  }
  stop() {
    this.isStopped || (this.isStopped = true, this.animate.stop(), this.reset());
  }
  raf(t3) {
    const e3 = t3 - (this.time || t3);
    this.time = t3, this.animate.advance(1e-3 * e3);
  }
  scrollTo(e3, { offset: i2 = 0, immediate: s2 = false, lock: o3 = false, duration: n3 = this.options.duration, easing: r2 = this.options.easing, lerp: l2 = !n3 && this.options.lerp, onComplete: h, force: a3 = false, programmatic: c2 = true } = {}) {
    if (!this.isStopped && !this.isLocked || a3) {
      if (["top", "left", "start"].includes(e3)) e3 = 0;
      else if (["bottom", "right", "end"].includes(e3)) e3 = this.limit;
      else {
        let t3;
        if ("string" == typeof e3 ? t3 = document.querySelector(e3) : (null == e3 ? void 0 : e3.nodeType) && (t3 = e3), t3) {
          if (this.options.wrapper !== window) {
            const t4 = this.options.wrapper.getBoundingClientRect();
            i2 -= this.isHorizontal ? t4.left : t4.top;
          }
          const s3 = t3.getBoundingClientRect();
          e3 = (this.isHorizontal ? s3.left : s3.top) + this.animatedScroll;
        }
      }
      if ("number" == typeof e3) {
        if (e3 += i2, e3 = Math.round(e3), this.options.infinite ? c2 && (this.targetScroll = this.animatedScroll = this.scroll) : e3 = t2(0, e3, this.limit), s2) return this.animatedScroll = this.targetScroll = e3, this.setScroll(this.scroll), this.reset(), void (null == h || h(this));
        if (!c2) {
          if (e3 === this.targetScroll) return;
          this.targetScroll = e3;
        }
        this.animate.fromTo(this.animatedScroll, e3, { duration: n3, easing: r2, lerp: l2, onStart: () => {
          o3 && (this.isLocked = true), this.isScrolling = true;
        }, onUpdate: (t3, e4) => {
          this.isScrolling = true, this.velocity = t3 - this.animatedScroll, this.direction = Math.sign(this.velocity), this.animatedScroll = t3, this.setScroll(this.scroll), c2 && (this.targetScroll = t3), e4 || this.emit(), e4 && (this.reset(), this.emit(), null == h || h(this), this.__preventNextScrollEvent = true, requestAnimationFrame(() => {
            delete this.__preventNextScrollEvent;
          }));
        } });
      }
    }
  }
  get rootElement() {
    return this.options.wrapper === window ? document.documentElement : this.options.wrapper;
  }
  get limit() {
    return this.options.__experimental__naiveDimensions ? this.isHorizontal ? this.rootElement.scrollWidth - this.rootElement.clientWidth : this.rootElement.scrollHeight - this.rootElement.clientHeight : this.dimensions.limit[this.isHorizontal ? "x" : "y"];
  }
  get isHorizontal() {
    return "horizontal" === this.options.orientation;
  }
  get actualScroll() {
    return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;
  }
  get scroll() {
    return this.options.infinite ? (t3 = this.animatedScroll, e3 = this.limit, (t3 % e3 + e3) % e3) : this.animatedScroll;
    var t3, e3;
  }
  get progress() {
    return 0 === this.limit ? 1 : this.scroll / this.limit;
  }
  get isSmooth() {
    return this.__isSmooth;
  }
  set isSmooth(t3) {
    this.__isSmooth !== t3 && (this.__isSmooth = t3, this.toggleClassName("lenis-smooth", t3));
  }
  get isScrolling() {
    return this.__isScrolling;
  }
  set isScrolling(t3) {
    this.__isScrolling !== t3 && (this.__isScrolling = t3, this.toggleClassName("lenis-scrolling", t3));
  }
  get isStopped() {
    return this.__isStopped;
  }
  set isStopped(t3) {
    this.__isStopped !== t3 && (this.__isStopped = t3, this.toggleClassName("lenis-stopped", t3));
  }
  get isLocked() {
    return this.__isLocked;
  }
  set isLocked(t3) {
    this.__isLocked !== t3 && (this.__isLocked = t3, this.toggleClassName("lenis-locked", t3));
  }
  get className() {
    let t3 = "lenis";
    return this.isStopped && (t3 += " lenis-stopped"), this.isLocked && (t3 += " lenis-locked"), this.isScrolling && (t3 += " lenis-scrolling"), this.isSmooth && (t3 += " lenis-smooth"), t3;
  }
  toggleClassName(t3, e3) {
    this.rootElement.classList.toggle(t3, e3), this.emitter.emit("className change", this);
  }
};

// node_modules/@studio-freight/react-lenis/dist/react-lenis.mjs
var import_react3 = __toESM(require_react(), 1);
"undefined" != typeof window && (window.reactLenisVersion = "0.0.46");
var m2 = (0, import_react3.createContext)();
var d = create(() => ({}));
function b2(r2, e3 = [], t3 = 0) {
  const { lenis: n3, addCallback: o3, removeCallback: a3 } = function() {
    const r3 = (0, import_react3.useContext)(m2), e4 = d();
    return null != r3 ? r3 : e4;
  }();
  return (0, import_react3.useEffect)(() => {
    if (r2 && o3 && a3 && n3) return o3(r2, t3), r2(n3), () => {
      a3(r2);
    };
  }, [n3, o3, a3, t3, ...e3]), n3;
}
var y2 = (0, import_react3.forwardRef)((o3, a3) => {
  var { children: f2, root: p = false, options: b3 = {}, autoRaf: y3 = true, rafPriority: v = 0, className: O2 } = o3, g2 = function(r2, e3) {
    var t3 = {};
    for (var n3 in r2) Object.prototype.hasOwnProperty.call(r2, n3) && e3.indexOf(n3) < 0 && (t3[n3] = r2[n3]);
    if (null != r2 && "function" == typeof Object.getOwnPropertySymbols) {
      var o4 = 0;
      for (n3 = Object.getOwnPropertySymbols(r2); o4 < n3.length; o4++) e3.indexOf(n3[o4]) < 0 && Object.prototype.propertyIsEnumerable.call(r2, n3[o4]) && (t3[n3[o4]] = r2[n3[o4]]);
    }
    return t3;
  }(o3, ["children", "root", "options", "autoRaf", "rafPriority", "className"]);
  const h = (0, import_react3.useRef)(), w = (0, import_react3.useRef)(), [k2, N] = (0, import_react3.useState)(), j = (0, import_react3.useRef)([]), C = (0, import_react3.useCallback)((r2, e3) => {
    j.current.push({ callback: r2, priority: e3 }), j.current.sort((r3, e4) => r3.priority - e4.priority);
  }, []), E2 = (0, import_react3.useCallback)((r2) => {
    j.current = j.current.filter((e3) => e3.callback !== r2);
  }, []);
  (0, import_react3.useImperativeHandle)(a3, () => ({ wrapper: h.current, content: w.current, lenis: k2 }), [k2]), (0, import_react3.useEffect)(() => {
    const r2 = new Lenis(Object.assign(Object.assign({}, b3), !p && { wrapper: h.current, content: w.current }));
    return N(r2), () => {
      r2.destroy(), N(void 0);
    };
  }, [p, JSON.stringify(b3)]), m((r2) => {
    y3 && (null == k2 || k2.raf(r2));
  }, v), (0, import_react3.useEffect)(() => {
    p && k2 && d.setState({ lenis: k2, addCallback: C, removeCallback: E2 });
  }, [p, k2, C, E2]);
  const P2 = (0, import_react3.useCallback)((r2) => {
    for (let e3 = 0; e3 < j.current.length; e3++) j.current[e3].callback(r2);
  }, []);
  (0, import_react3.useEffect)(() => (null == k2 || k2.on("scroll", P2), () => {
    null == k2 || k2.off("scroll", P2);
  }), [k2, P2]);
  const S2 = (0, import_react3.useCallback)(() => {
    h.current && (h.current.className = clsx_default(null == k2 ? void 0 : k2.className, O2));
  }, [k2, O2]);
  return (0, import_react3.useEffect)(() => (S2(), null == k2 || k2.on("className change", S2), () => {
    null == k2 || k2.off("className change", S2);
  }), [k2, S2]), import_react3.default.createElement(m2.Provider, { value: { lenis: k2, addCallback: C, removeCallback: E2 } }, p ? f2 : import_react3.default.createElement("div", Object.assign({ ref: h, className: clsx_default(null == k2 ? void 0 : k2.className, O2) }, g2), import_react3.default.createElement("div", { ref: w }, f2)));
});
export {
  y2 as Lenis,
  m2 as LenisContext,
  y2 as ReactLenis,
  y2 as default,
  b2 as useLenis
};
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=@studio-freight_react-lenis.js.map
